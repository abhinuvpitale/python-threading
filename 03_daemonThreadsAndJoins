import threading
import time
import logging

logging.basicConfig(level=logging.DEBUG,
                    format='(%(threadName)-10s) %(message)s',
                    )

def daemon():
    logging.debug('Starting')
    time.sleep(2)
    logging.debug('Exiting')

# Create a daemon thread. IT stays awake even after the main program has completed
d = threading.Thread(name='daemon', target=daemon)
d.setDaemon(True)

def non_daemon():
    logging.debug('Starting')
    logging.debug('Exiting')

t = threading.Thread(name='non-daemon', target=non_daemon)

d.start()
t.start()

# join() waits for the thread to complete in the main program for the time specified in the argument block.
# Since we are sleeping for time more than that, the main program quits and the complete output is not visible from the daemon thread.
d.join(1)
print('d.isAlive()', d.isAlive())
t.join()


''' OUTPUT


(daemon    ) Starting
(non-daemon) Starting
(non-daemon) Exiting
d.isAlive() True

Process finished with exit code 0

'''
